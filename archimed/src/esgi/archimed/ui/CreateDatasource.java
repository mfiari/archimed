/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package esgi.archimed.ui;

import esgi.archimed.Mediateur;
import esgi.archimed.adaptaters.Adapter;
import esgi.archimed.datasources.Datasource;
import esgi.archimed.datasources.SQLDatasource;
import esgi.archimed.datasources.XMLDatasource;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import javax.swing.Box;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author mike
 */
public class CreateDatasource extends javax.swing.JDialog {
    
    private final Mediateur mediateur;
    private final JPanel panelDatasource;
    private final Box panelAdapter;

    /**
     * Creates new form CreateDatasource
     * @param parent
     * @param mediateur
     */
    public CreateDatasource(java.awt.Frame parent, Mediateur mediateur) {
        super(parent, true);
        initComponents();
        this.panelDatasource = new JPanel();
        this.scrollPaneDatasource.setViewportView(this.panelDatasource);
        this.panelAdapter = Box.createVerticalBox();
        this.scrollPaneAdapter.setViewportView(this.panelAdapter);
        this.mediateur = mediateur;
        for (Adapter adapter : this.mediateur.getAdapters()) {
            JCheckBox checkBox = new JCheckBox(adapter.getName());
            this.panelAdapter.add(checkBox);
        }
        this.comboBoxDatasource.addItem("XML datasource");
        this.comboBoxDatasource.addItem("SQL datasource");
        Rectangle parentBounds = parent.getBounds();
        Dimension size = getSize();
        // Center in the parent
        int x = Math.max(0, parentBounds.x + (parentBounds.width - size.width) / 2);
        int y = Math.max(0, parentBounds.y + (parentBounds.height - size.height) / 2);
        setLocation(new Point(x, y));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxDatasource = new javax.swing.JComboBox();
        buttonCreate = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        textFieldName = new javax.swing.JTextField();
        scrollPaneDatasource = new javax.swing.JScrollPane();
        scrollPaneAdapter = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Datasource");
        setResizable(false);

        comboBoxDatasource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDatasourceActionPerformed(evt);
            }
        });

        buttonCreate.setText("Create");
        buttonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreateActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        textFieldName.setToolTipText("Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(buttonCreate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                                        .addComponent(buttonCancel))
                                    .addComponent(comboBoxDatasource, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(textFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 73, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPaneDatasource)
                            .addComponent(scrollPaneAdapter))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(textFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrollPaneDatasource, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPaneAdapter, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboBoxDatasource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCreate)
                    .addComponent(buttonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreateActionPerformed
        String item = this.comboBoxDatasource.getSelectedItem().toString();
        String name = this.textFieldName.getText();
        Datasource datasource;
        switch (item) {
            case "XML datasource" :
                if (name.isEmpty()) {
                    datasource = new XMLDatasource("");
                } else {
                    datasource = new XMLDatasource(name, "");
                }
                break;
            case "SQL datasource" :
                if (name.isEmpty()) {
                    datasource = new SQLDatasource("", 0, "", "");
                } else {
                    datasource = new SQLDatasource(name, "", 0, "", "");
                }
                break;
            default : 
                datasource = null;
                break;
        }
        Component [] components = this.panelAdapter.getComponents();
        int index = 0;
        for (Component component : components) {
            if (component instanceof JCheckBox) {
                JCheckBox checkBox = (JCheckBox) component;
                if (checkBox.isSelected()) {
                    Adapter adapter = this.mediateur.getAdapters().get(index);
                    if (!adapter.addDatasource(datasource)) {
                        JOptionPane.showMessageDialog(this, "This datasource is not compitible with this adapter.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                index++;
            }
        }
        dispose();
    }//GEN-LAST:event_buttonCreateActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void comboBoxDatasourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDatasourceActionPerformed
        String item = this.comboBoxDatasource.getSelectedItem().toString();
        if (this.panelDatasource.getComponentCount() > 0) {
            this.panelDatasource.removeAll();
            this.panelDatasource.repaint();
            this.panelDatasource.validate();
        }
        switch (item) {
            case "XML datasource" :
                JTextField urlTextField = new JTextField("url");
                urlTextField.setToolTipText("url");
                urlTextField.setPreferredSize(new Dimension(150, 30));
                this.panelDatasource.add(urlTextField);
                break;
            case "SQL datasource" :
                int width = (this.panelDatasource.getWidth() / 4)-10;
                int heigth = 30;
                JTextField hostTextField = new JTextField("host");
                hostTextField.setToolTipText("host");
                hostTextField.setPreferredSize(new Dimension(width, heigth));
                JTextField portTextField = new JTextField("port");
                portTextField.setToolTipText("port");
                portTextField.setPreferredSize(new Dimension(width, heigth));
                JTextField loginTextField = new JTextField("login");
                loginTextField.setToolTipText("login");
                loginTextField.setPreferredSize(new Dimension(width, heigth));
                JTextField passwordTextField = new JTextField("password");
                passwordTextField.setToolTipText("password");
                passwordTextField.setPreferredSize(new Dimension(width, heigth));
                this.panelDatasource.add(hostTextField);
                this.panelDatasource.add(portTextField);
                this.panelDatasource.add(loginTextField);
                this.panelDatasource.add(passwordTextField);
                break;
            default : 
                break;
        }
        this.panelDatasource.repaint();
        this.panelDatasource.validate();
    }//GEN-LAST:event_comboBoxDatasourceActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonCreate;
    private javax.swing.JComboBox comboBoxDatasource;
    private javax.swing.JScrollPane scrollPaneAdapter;
    private javax.swing.JScrollPane scrollPaneDatasource;
    private javax.swing.JTextField textFieldName;
    // End of variables declaration//GEN-END:variables
}
